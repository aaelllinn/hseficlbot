import asyncio
import logging
import aiosqlite
import pytz
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
TOKEN = ("7526423092:AAEhJzRO1jDZ6McW7_2H_UtbMJ8kma4O3YA")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()
dp.data = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üíÖüèª–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—ÉüíÖüèª"), KeyboardButton(text="üëÄ–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏üëÄ")],
        [KeyboardButton(text="üóë–û—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—Éüóë"), KeyboardButton(text="üîç–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏üîç")],
        [KeyboardButton(text="üîß–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—Éüîß"), KeyboardButton(text="üéì–£—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏üéì")],
        [KeyboardButton(text="üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà"), KeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), KeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    try:
        async with aiosqlite.connect("flashcards.db") as db:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã flashcards
            await db.execute("""
                CREATE TABLE IF NOT EXISTS flashcards (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    question TEXT,
                    answer TEXT,
                    category TEXT
                )
            """)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–∞ category
            cursor = await db.execute("PRAGMA table_info(flashcards)")
            columns = [info[1] for info in await cursor.fetchall()]
            if 'category' not in columns:
                logging.info("–°—Ç–æ–ª–±–µ—Ü 'category' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ")
                await db.execute("ALTER TABLE flashcards ADD COLUMN category TEXT")
                await db.commit()
                logging.info("–°—Ç–æ–ª–±–µ—Ü 'category' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")

 # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã statistics
            await db.execute("""
                CREATE TABLE IF NOT EXISTS statistics (
                    user_id INTEGER PRIMARY KEY,
                    correct INTEGER DEFAULT 0,
                    incorrect INTEGER DEFAULT 0
                )
            """)
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã reminders
            await db.execute("""
                CREATE TABLE IF NOT EXISTS reminders (
                    user_id INTEGER PRIMARY KEY,
                    enabled INTEGER DEFAULT 0
                )
            """)
            await db.commit()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("–ü—Ä–∏–≤–µ—Ç!üëãüèª \n\n–Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. \n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
@dp.message(F.text == "üíÖüèª–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—ÉüíÖüèª")
async def add_card_prompt(message: Message):
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    dp.data[message.from_user.id] = {"state": "add_category"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ (–∏–ª–∏ '–û–±—â–µ–µ', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–º—É):")

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏
@dp.message(F.text == "üëÄ–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏üëÄ")
async def show_cards(message: Message):
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    try:
        async with aiosqlite.connect("flashcards.db") as db:
            cursor = await db.execute(
                "SELECT category, question, answer FROM flashcards WHERE user_id = ? ORDER BY category",
                (message.from_user.id,))
            cards = await cursor.fetchall()
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    response = ""
    current_category = None
    card_number = 1
    for category, question, answer in cards:
        if category != current_category:
            if current_category is not None:
                response += "\n"
            response += f"<b>üìö –¢–µ–º–∞: {category}</b>\n"
            current_category = category
        response += f"{card_number}. {question} - {answer}\n"
        card_number += 1

    await message.answer(response)

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
@dp.message(F.text == "üóë–û—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—Éüóë")
async def delete_card_prompt(message: Message):
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–û—á–∏—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    try:
        async with aiosqlite.connect("flashcards.db") as db:
            cursor = await db.execute(
                "SELECT category, question, answer FROM flashcards WHERE user_id = ? ORDER BY category",
                (message.from_user.id,))
            cards = await cursor.fetchall()
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    response = ""
    current_category = None
    card_number = 1
    for category, question, answer in cards:
        if category != current_category:
            response += f"\n<b>üìö –¢–µ–º–∞: {category}</b>\n"
            current_category = category
        response += f"{card_number}. {question} - {answer}\n"
        card_number += 1

   dp.data[message.from_user.id] = {"state": "delete_card"}
    await message.answer(f"–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:\n{response}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
@dp.message(F.text == "üîç–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏üîç")
async def view_card_prompt(message: Message):
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    try:
        async with aiosqlite.connect("flashcards.db") as db:
            cursor = await db.execute(
                "SELECT category, question, answer FROM flashcards WHERE user_id = ? ORDER BY category",
                (message.from_user.id,))
            cards = await cursor.fetchall()
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    response = ""
    current_category = None
    card_number = 1
    for category, question, answer in cards:
        if category != current_category:
            response += f"\n<b>üìö –¢–µ–º–∞: {category}</b>\n"
            current_category = category
        response += f"{card_number}. {question} - {answer}\n"
        card_number += 1

    dp.data[message.from_user.id] = {"state": "view_card"}
    await message.answer(f"–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:\n{response}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
@dp.message(F.text == "üîß–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—Éüîß")
async def edit_card_prompt(message: Message):
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    try:
        async with aiosqlite.connect("flashcards.db") as db:
            cursor = await db.execute(
                "SELECT category, question, answer FROM flashcards WHERE user_id = ? ORDER BY category",
                (message.from_user.id,))
            cards = await cursor.fetchall()
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return

    response = ""
    current_category = None
    card_number = 1
    for category, question, answer in cards:
        if category != current_category:
            response += f"\n<b>üìö –¢–µ–º–∞: {category}</b>\n"
            current_category = category
        response += f"{card_number}. {question} - {answer}\n"
        card_number += 1

    dp.data[message.from_user.id] = {"state": "edit_card"}
    await message.answer(
        f"–í–∞—à–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:\n{response}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–æ–º–µ—Ä - –í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç")

# –£—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
@dp.message(F.text == "üéì–£—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏üéì")
async def learn_cards_prompt(message: Message):
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–£—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect("flashcards.db") as db:
            cursor = await db.execute(
                "SELECT DISTINCT category FROM flashcards WHERE user_id = ? AND category IS NOT NULL",
                (user_id,))
            categories = [row[0] for row in await cursor.fetchall()]
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not categories:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –ø–æ–º–æ—â—å—é '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É'. üòä")
        return

    category_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=cat)] for cat in categories] + [[KeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    dp.data[user_id] = {"state": "learn_select_category"}
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫:\n\n" +
        "\n".join(f"‚Ä¢ {cat}" for cat in categories),
        reply_markup=category_keyboard
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(F.text == "üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìà")
async def show_statistics(message: Message):
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect("flashcards.db") as db:
            cursor = await db.execute("SELECT correct, incorrect FROM statistics WHERE user_id = ?", (user_id,))
            row = await cursor.fetchone()
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if row:
        correct, incorrect = row
        total = correct + incorrect
        percent = (correct / total * 100) if total > 0 else 0
        await message.answer(
            f"<b>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n"
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {incorrect}\n"
            f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {percent:.2f}%"
        )
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –ø–æ—è–≤–∏–ª–∞—Å—å.")

# –í–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(F.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def enable_reminder(message: Message):
    user_id = message.from_user.id
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    try:
        async with aiosqlite.connect("flashcards.db") as db:
            await db.execute("""
                INSERT INTO reminders (user_id, enabled) VALUES (?, 1)
                ON CONFLICT(user_id) DO UPDATE SET enabled = 1
            """, (user_id,))
            await db.commit()
        await message.answer("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 18:00 –ø–æ –ú–°–ö.")
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(F.text == "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def disable_reminder(message: Message):
    user_id = message.from_user.id
    logging.info(f"–ö–Ω–æ–ø–∫–∞ '–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    try:
        async with aiosqlite.connect("flashcards.db") as db:
            await db.execute("""
                INSERT INTO reminders (user_id, enabled) VALUES (?, 0)
                ON CONFLICT(user_id) DO UPDATE SET enabled = 0
            """, (user_id,))
            await db.commit()
        await message.answer("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def send_reminders():
    logging.info("–ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    try:
        async with aiosqlite.connect("flashcards.db") as db:
            cursor = await db.execute("SELECT user_id FROM reminders WHERE enabled = 1")
            user_ids = await cursor.fetchall()
            for (user_id,) in user_ids:
                try:
                    await bot.send_message(
                        user_id,
                        "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏!"
                    )
                    logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    except aiosqlite.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    state_data = dp.data.get(user_id, {})
    state = state_data.get("state")

    if state == "add_category":
        category = message.text.strip() or "–û–±—â–µ–µ"
        if len(category) > 50:
            await message.answer("‚ùï –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        dp.data[user_id] = {"state": "add_cards", "category": category}
        await message.answer(
            f"–¢–µ–º–∞: {category}\n–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç\n–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫.\n\n–ü—Ä–∏–º–µ—Ä:\n–ß—Ç–æ —Ç–∞–∫–æ–µ –ü–∏? - 3.14\n2+2? - 4")

   elif state == "add_cards":
        category = state_data["category"]
        lines = message.text.strip().split("\n")
        logging.info(f"User {user_id} input: {message.text}")
        logging.info(f"Parsed lines: {lines}")
        added = 0
        try:
            async with aiosqlite.connect("flashcards.db") as db:
                for line in lines:
                    line = line.strip()
                    logging.info(f"Processing line: {line}")
                    if not line:
                        continue
                    splitter = " - " if " - " in line else " | " if " | " in line else None
                    if splitter:
                        parts = line.split(splitter, 1)
                        logging.info(f"Split parts: {parts}")
                        if len(parts) == 2:
                            question, answer = map(str.strip, parts)
                            if question and answer:
                                logging.info(f"Adding: {question} - {answer}")
                                await db.execute(
                                    "INSERT INTO flashcards (user_id, question, answer, category) VALUES (?, ?, ?, ?)",
                                    (user_id, question, answer, category))
                                added += 1
                            else:
                                logging.warning(f"–ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç: {question} - {answer}")
                        else:
                            logging.warning(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: {parts}")
                    else:
                        logging.warning(f"–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ: {line}")
                await db.commit()
            logging.info(f"Added {added} cards")
        except aiosqlite.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            dp.data[user_id] = {}
            return

        if added:
            await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {added} –≤ —Ç–µ–º—É '{category}' ‚úÖ")
        else:
            await message.answer(
                "‚ùï –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç').\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ ' - ' –∏–ª–∏ ' | '.")
        dp.data[user_id] = {}

    elif state == "delete_card":
        if not message.text.isdigit():
            await message.answer("‚ùï –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
            dp.data[user_id] = {}
            return
        number = int(message.text) - 1
 try:
            async with aiosqlite.connect("flashcards.db") as db:
                cursor = await db.execute("SELECT id FROM flashcards WHERE user_id = ? ORDER BY id", (user_id,))
                user_cards = await cursor.fetchall()
                if 0 <= number < len(user_cards):
                    card_id = user_cards[number][0]
                    await db.execute("DELETE FROM flashcards WHERE id = ?", (card_id,))
                    await db.commit()
                    await message.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ —É–¥–∞–ª–µ–Ω–∞! ‚úÖ")
                else:
                    await message.answer("‚ùï –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        except aiosqlite.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        dp.data[user_id] = {}
   
elif state == "view_card":
        if not message.text.isdigit():
            await message.answer("‚ùï –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
            dp.data[user_id] = {}
            return
        number = int(message.text) - 1
        try:
            async with aiosqlite.connect("flashcards.db") as db:
                cursor = await db.execute(
                    "SELECT category, question, answer FROM flashcards WHERE user_id = ? ORDER BY id", (user_id,))
                user_cards = await cursor.fetchall()
                if 0 <= number < len(user_cards):
                    category, q, a = user_cards[number]
                    await message.answer(f"–¢–µ–º–∞: {category}\n–í–æ–ø—Ä–æ—Å: {q}\n–û—Ç–≤–µ—Ç: {a}")
                else:
                    await message.answer("‚ùï –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        except aiosqlite.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        dp.data[user_id] = {}
  
elif state == "edit_card":
        parts = message.text.split(" - ")
        if len(parts) != 3 or not parts[0].strip().isdigit():
            await message.answer("‚ùï –§–æ—Ä–º–∞—Ç: –ù–æ–º–µ—Ä - –í–æ–ø—Ä–æ—Å - –û—Ç–≤–µ—Ç")
            dp.data[user_id] = {}
            return
        number = int(parts[0].strip()) - 1
        new_q = parts[1].strip()
        new_a = parts[2].strip()
        try:
            async with aiosqlite.connect("flashcards.db") as db:
                cursor = await db.execute("SELECT id FROM flashcards WHERE user_id = ? ORDER BY id", (user_id,))
                user_cards = await cursor.fetchall()
                if 0 <= number < len(user_cards):
                    card_id = user_cards[number][0]
                    await db.execute("UPDATE flashcards SET question = ?, answer = ? WHERE id = ?",
                                     (new_q, new_a, card_id))
                    await db.commit()
                    await message.answer("üëçüèª –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! üëçüèª")
                else:
                    await message.answer("‚ùï –ù–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.")
        except aiosqlite.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        dp.data[user_id] = {}
  
elif state == "learn_select_category":
        if message.text == "üîô –û—Ç–º–µ–Ω–∞":
            await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=keyboard)
            dp.data[user_id] = {}
            return
        category = message.text.strip()
        try:
            async with aiosqlite.connect("flashcards.db") as db:
                cursor = await db.execute(
                    "SELECT question, answer FROM flashcards WHERE user_id = ? AND category = ? ORDER BY RANDOM()",
                    (user_id, category)
                )
                cards = await cursor.fetchall()
        except aiosqlite.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            dp.data[user_id] = {}
            return

        if not cards:
            await message.answer(
                f"–í —Ç–µ–º–µ '{category}' –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏.",
                reply_markup=keyboard
            )
            dp.data[user_id] = {}
            return
       
dp.data[user_id] = {
            "state": "learn_answer",
            "category": category,
            "cards": cards,
            "current_index": 0,
            "correct_answers": 0
        }
        await message.answer(
            f"üìö –ù–∞—á–Ω—ë–º –∏–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã: {category}\n\n–í–æ–ø—Ä–æ—Å: {cards[0][0]}\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:",
            reply_markup=keyboard
        )

    elif state == "learn_answer":
        category = state_data["category"]
        cards = state_data["cards"]
        idx = state_data["current_index"]
        correct = state_data["correct_answers"]

        question, answer = cards[idx]
        if message.text.strip().lower() == answer.strip().lower():
            await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! ‚úÖ")
            correct += 1
        else:
            await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå \n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer}")

        idx += 1
        if idx < len(cards):
            dp.data[user_id] = {
                "state": "learn_answer",
                "category": category,
                "cards": cards,
                "current_index": idx,
                "correct_answers": correct
            }
            await message.answer(f"–í–æ–ø—Ä–æ—Å: {cards[idx][0]}\n–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:", reply_markup=keyboard)
        else:
            incorrect = len(cards) - correct
            try:
                async with aiosqlite.connect("flashcards.db") as db:
                    await db.execute("""
                        INSERT INTO statistics (user_id, correct, incorrect)
                        VALUES (?, ?, ?)
                        ON CONFLICT(user_id) DO UPDATE SET
                        correct = correct + ?, incorrect = incorrect + ?
                    """, (user_id, correct, incorrect, correct, incorrect))
                    await db.commit()
            except aiosqlite.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

            await message.answer(
                f"üìö –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ–º—ã '{category}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{len(cards)}"
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            dp.data[user_id] = {}

    else:
        logging.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message.text}'")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ ‚òùüèª, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")

